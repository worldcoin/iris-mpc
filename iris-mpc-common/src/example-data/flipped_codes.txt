+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A/wP/D/zz//P/wMwDwzPA/PPwDzw/ADMAA8AAP/wwzAP///z8A//8/MMPMDPMM/PP8Dz/wAzAzzAMPDPA8MDDz/P/AwDwAMPAwz/DzzA8wPAzPMAzMP8APzAwA8A/PAM/w//wzMPPPPMDP/ADDPPDwMPAMPwPA8/M8AMwPP/z/z/wDwDADzz8wPPD88wMA/zPAAz/MD/P8PDM/M//MD/AAz///A88/wM/88/M/z/PwAMM//AMPzz8/A8APw8Dw8PzwDMwzP8MMMA/8M8/DPw8MD/Dw/w/zPwP8PMP8zwPDA/Pw8DPDwDDzPDDMw8/D88zDzzA8ADzD/8A/8w8wPDMM/zD8z//zMww88D/MwwP8zM8MDw8//A//P/Pw/wMAzwD/DMAMP8AwwMM8M88DMAP/wzM8M8PM/8/8wADAM/PA/MDzww8DPP/P8PwzAwDz/D8w/DzADDMD8/8MM8ADwPzP8z8w8Dw/8/8DwwDD88/APPwDAPzzzzDwwD8/8//APz/wD88M8/wAMzADAzzA/AA88DP/AzMMzwz8PAz/8APAM8M8/M/MAzPM/PMPAzMPwDP8Dz/w8wzz/zzz8/wAMwPwzPDDM8PP8z8PzPP8Pzzw8zDzz8DA8/PPDA8/DzDM/PzA8AAwMAzA8wDA/wPPw/ADzAzDz/AD//MM8zPAzzwP8AD/PDPDwMPw/MP/DAD/D8AAPADMMA8A8DwD/888AMwMMw8/8DzDDPPDPDPz8wPzADw8A8/wP//A/wA8AM//P/DMAM/M/Pww/AMwzADMDP/AwP/8MPMADMAM8M8zAMADMD//PDP//MwPAMP8P/Mw/8z8/PAAD/wAMPAA/PMPAPMzMMw8zA8MADw/Az/M/Aw8DPD/z8DMPzPA8DMzAzAM/ADwMz8D/PPDDP/zAzMMPw/AM/Pz//8P8zwD8/Dw==

# Code to generate the above codes
import numpy as np
import base64

def random_template():
  mock_iris_code = np.random.randint(0, 2, (16, 200, 2, 2)).astype(bool)
  mock_mask_code = np.random.randint(0, 2, (16, 200, 2)).astype(bool)
  mock_mask_code = np.stack([mock_mask_code, mock_mask_code], axis=-1) 
  return (mock_iris_code, mock_mask_code)

def flip_v_mc(array):
	cut = array.shape[1] // 2
	return np.concatenate([np.flip(array[:, :cut, :], axis=1), np.flip(array[:, cut:, :], axis=1)], axis=1)

def flip_v_ic(array):
  cut = array.shape[1] // 2
  flipped_array = np.concatenate([np.flip(array[:, :cut, :], axis=1), np.flip(array[:, cut:, :], axis=1)], axis=1)
  flipped_array[...,1] = ~flipped_array[...,1]
  return flipped_array

def encode_template(a):
  co_pack = np.packbits(a)
  return base64.b64encode(co_pack.tobytes())

c,m = random_template()
mf = flip_v_mc(m)
cf = flip_v_ic(c)
for e in [c,m,cf,mf]:
  print(encode_template(e).decode("utf-8"))