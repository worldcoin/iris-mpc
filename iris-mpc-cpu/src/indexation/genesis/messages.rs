use super::types::IrisGaloisShares;
use std::fmt;

// ------------------------------------------------------------------------
// Definitions.
// ------------------------------------------------------------------------

// Signals that indexation process starts.
#[derive(Clone, Debug)]
pub struct OnBegin;

// Signals that a new Iris batch is ready for processing.
#[derive(Clone, Debug)]
pub(crate) struct OnBeginBatch {
    // Batch ordinal identifier.
    pub batch_idx: usize,

    // Batch size.
    pub batch_size: usize,

    // Set of Iris serial identifiers to be indexed.
    pub iris_serial_ids: Vec<i64>,
}

// Signals that a new Iris identifier is ready for processing.
#[derive(Clone, Debug)]
pub struct OnBeginBatchItem {
    // Batch ordinal identifier.
    pub(crate) batch_idx: usize,

    // Batch item ordinal identifier.
    pub(crate) batch_item_idx: usize,

    // Serial ID of Iris being indexed.
    pub(crate) iris_serial_id: i64,
}

// Signals that graph indexation is about to start.
#[derive(Clone, Debug)]
pub struct OnBeginGraphIndexation {
    // Batch ordinal identifier.
    pub(crate) batch_idx: usize,

    // Batch size.
    pub(crate) batch_size: usize,
}

// Signals that indexation is complete.
pub struct OnEnd {
    // Batch count.
    pub(crate) batch_count: usize,
}

// Signals that Iris batch indexation is complete.
#[derive(Clone, Debug)]
pub struct OnEndBatch {
    // Batch ordinal identifier.
    pub(crate) batch_idx: usize,

    // Batch size.
    pub(crate) batch_size: usize,
}

// Signals that an indexation error occurred.
#[derive(Clone, Debug)]
pub struct OnError;

// Signals that Iris shares have been fetched from a store.
#[derive(Clone, Debug)]
pub struct OnFetchIrisShares {
    // Batch ordinal identifier.
    pub(crate) batch_idx: usize,

    // Batch item ordinal identifier.
    pub(crate) batch_item_idx: usize,

    // Iris serial ID.
    pub(crate) iris_serial_id: i64,

    // Iris secret shares generated by MPC participant.
    pub(crate) iris_shares: IrisGaloisShares,
}

// ------------------------------------------------------------------------
// Trait implementations.
// ------------------------------------------------------------------------

impl fmt::Display for OnBegin {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "")
    }
}

impl fmt::Display for OnBeginBatch {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "batch[idx={} | size={}]",
            self.batch_idx, self.batch_size
        )
    }
}

impl fmt::Display for OnBeginBatchItem {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "batch[idx={}] | batch-item[idx={} | serial-id={}]",
            self.batch_idx, self.batch_item_idx, self.iris_serial_id
        )
    }
}

impl fmt::Display for OnBeginGraphIndexation {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "batch[idx={} | size={}]",
            self.batch_idx, self.batch_size
        )
    }
}

impl fmt::Display for OnEnd {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "batch-count={}", self.batch_count)
    }
}

impl fmt::Display for OnEndBatch {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "batch[idx={} | size={}]",
            self.batch_idx, self.batch_size
        )
    }
}

impl fmt::Display for OnFetchIrisShares {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "batch[idx={}] | batch-item[idx={} | serial-id={}] | party-id={}",
            self.batch_idx,
            self.batch_item_idx,
            self.iris_serial_id,
            self.iris_shares.party_id()
        )
    }
}
