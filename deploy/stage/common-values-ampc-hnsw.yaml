image: "ghcr.io/worldcoin/iris-mpc-cpu:3c309f9a5e04ef5b7c10bac0d45c5e655b4f183a"

environment: stage
replicaCount: 1

strategy:
  type: Recreate

datadog:
  enabled: true

hostNetwork: false

ports:
  - containerPort: 3000
    name: health
    protocol: TCP
  - containerPort: 4000
    name: tcp-4000
    protocol: TCP
  - containerPort: 4001
    name: tcp-4001
    protocol: TCP
  - containerPort: 4002
    name: tcp-4002
    protocol: TCP
  - containerPort: 4100
    name: tcp-4100
    protocol: TCP
  - containerPort: 4101
    name: tcp-4101
    protocol: TCP
  - containerPort: 4102
    name: tcp-4102
    protocol: TCP

livenessProbe:
  httpGet:
    path: /health
    port: health

readinessProbe:
  periodSeconds: 30
  httpGet:
    path: /ready
    port: health

startupProbe:
  initialDelaySeconds: 60
  failureThreshold: 120
  periodSeconds: 30
  httpGet:
    path: /ready
    port: health

resources:
  limits:
    cpu: 31
    memory: 930Gi
  requests:
    cpu: 31
    memory: 930Gi

imagePullSecrets:
  - name: github-secret

podAnnotations:
  karpenter.sh/do-not-disrupt: "true"

nodeSelector:
  kubernetes.io/arch: amd64
  karpenter.sh/capacity-type: on-demand
  node.kubernetes.io/instance-type: "x2iedn.8xlarge"

podSecurityContext:
  runAsUser: 65534
  runAsGroup: 65534

preStop:
  # preStop.sleepPeriod specifies the time spent in Terminating state before SIGTERM is sent
  sleepPeriod: 10

# terminationGracePeriodSeconds specifies the grace time between SIGTERM and SIGKILL
# long enough to allow for graceful shutdown to safely process 2 batches
# single batch timeout in stage is 240 seconds
terminationGracePeriodSeconds: 500

mountSSLCerts:
  enabled: true
  mountPath: /etc/ssl/private

nginxSidecar:
  enabled: true
  port: 6443
  ports:
    - containerPort: 4100
      name: tcp-4000
      protocol: TCP
    - containerPort: 4101
      name: tcp-4001
      protocol: TCP
    - containerPort: 4102
      name: tcp-4002
      protocol: TCP
  secrets:
    enabled: true
    volumeMount:
      - name: nginx-certs
        mountPath: /etc/nginx/cert
    volume:
      - name: nginx-certs
        secret:
          secretName: application
          items:
            - key: certificate.crt
              path: certificate.crt
            - key: key.pem
              path: key.pem
          optional: false
  config:
    nginx.conf: |
      # Run nginx as non-root user - use /tmp for PID file
      pid /tmp/nginx.pid;
      worker_processes  auto;
  
      # Send error logs to stderr
      error_log /dev/stderr info;

      events {
          worker_connections 1024;
      }

      stream {
          # Define a custom log format for stream context
          log_format basic '$remote_addr [$time_local] '
                          '$protocol $status $bytes_sent $bytes_received '
                          '$session_time';

          # Send access logs to stdout with custom format
          access_log /dev/stdout basic;

          ssl_certificate /etc/nginx/cert/certificate.crt;
          ssl_certificate_key /etc/nginx/cert/key.pem;
          ssl_protocols       TLSv1.3;
          ssl_ciphers         HIGH:!aNULL:!MD5;

          # TCP listener for port 4000
          server {
              listen 4100 ssl;
              proxy_pass 127.0.0.1:4000;
          }

          # TCP listener for port 4001
          server {
              listen 4101 ssl;
              proxy_pass 127.0.0.1:4001;
          }

          # TCP listener for port 4002
          server {
              listen 4102 ssl;
              proxy_pass 127.0.0.1:4002;
          }
      }
