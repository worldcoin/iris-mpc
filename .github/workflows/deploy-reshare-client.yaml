name: Reshare Client Deployment on Stage env

on:
  workflow_dispatch:
    inputs:
      target_participant:
        description: 'Target Participant (0, 1, or 2)'
        required: true
        type: choice
        options:
          - '0'
          - '1'
          - '2'
      db_start:
        description: 'Database Start Range'
        required: true
        type: string
        default: '1'
      db_end:
        description: 'Database End Range'
        required: true
        type: string
        default: '10001'

jobs:
  validate-input:
    runs-on: ubuntu-latest
    steps:
      - name: Validate Inputs
        run: |
          # Validate target_participant
          if [[ ! "${{ inputs.target_participant }}" =~ ^[0-2]$ ]]; then
            echo "Invalid target participant. Must be 0, 1, or 2."
            exit 1
          fi

          # Validate db_start and db_end are numeric
          if [[ ! "${{ inputs.db_start }}" =~ ^[0-9]+$ ]] ||
             [[ ! "${{ inputs.db_end }}" =~ ^[0-9]+$ ]]; then
            echo "DB start and end must be numeric values."
            exit 1
          fi

          # Validate db_start is less than db_end
          if [[ "${{ inputs.db_start }}" -ge "${{ inputs.db_end }}" ]]; then
            echo "DB start must be less than DB end."
            exit 1
          fi

  deploy-participants:
    needs: validate-input
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - local_participant: 0
            account_id: 024848486749
          - local_participant: 1
            account_id: 024848486818
          - local_participant: 2
            account_id: 024848486770

    steps:
      - name: Determine Other Participants
        id: other-participants
        run: |
          # Create an associative array mapping target participants to their allowed local participants
          # Key: Target participant
          # Value: Space-separated list of local participants allowed to deploy
          declare -A participant_map=(
            [0]="1 2"  # When target is 0, allowed local participants are 1 and 2
            [1]="0 2"  # When target is 1, allowed local participants are 0 and 2
            [2]="0 1"  # When target is 2, allowed local participants are 0 and 1
          )

          # Retrieve the list of allowed participants for the current target participant
          # Splits the space-separated string into an array of participants
          other_participants=(${participant_map[${{ inputs.target_participant }}]})

          is_allowed=false
          for participant in "${other_participants[@]}"; do
            if [[ "${{ matrix.local_participant }}" == "$participant" ]]; then
              is_allowed=true
              break
            fi
          done

          # Output the deployment eligibility status
          # This will be used in subsequent steps to conditionally execute deployment
          echo "is_allowed=$is_allowed" >> $GITHUB_OUTPUT

      - name: Debug Participant Info
        run: |
          echo "Target Participant: ${{ inputs.target_participant }}"
          echo "Local Participant: ${{ matrix.local_participant }}"
          echo "Allowed for deployment: ${{ steps.other-participants.outputs.is_allowed }}"
          echo "Aws account_id: ${{ matrix.account_id }}"

      - name: Checkout repository
        if: steps.other-participants.outputs.is_allowed == 'true'
        uses: actions/checkout@v3


      - name: Configure AWS Credentials
        if: steps.other-participants.outputs.is_allowed == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ matrix.account_id }}:role/oidc/github-deploy
          aws-region: eu-north-1
          role-duration-seconds: 900

      - name: Connect to EKS cluster
        if: steps.other-participants.outputs.is_allowed == 'true'
        run: aws eks update-kubeconfig --name smpcv2-${{ matrix.local_participant }}-stage

      - name: Login to Amazon ECR
        if: steps.other-participants.outputs.is_allowed == 'true'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Deploy Reshare Client Job
        if: steps.other-participants.outputs.is_allowed == 'true'
        run: |
          helm upgrade --install reshare-client-${{ matrix.local_participant }} \
          oci://${{ steps.login-ecr.outputs.registry }}/common-job \
          --version 1.2.2 \
          --namespace reshare-server \
          --set common-job.image=
          --set common-job.command='/sbin/reshare-client.sh'
          --set common-job.args='{
            "${{ matrix.local_participant }}",
            "${{ inputs.target_participant }}",
            "${{ inputs.db_start }}",
            "${{ inputs.db_end }}"
          }'
