name: Full CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: "${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}"
  cancel-in-progress: true

jobs:
  # Build job - creates all artifacts including tests, libs, bins, benchmarks, examples
  build-all:
    timeout-minutes: 10
    runs-on:
      labels: ubuntu-22.04-16core
    outputs:
      src_any_changed: ${{ steps.changed-files-yaml.outputs.src_any_changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

      - name: Get all test, doc and src files that have changed
        id: changed-files-yaml
        uses: tj-actions/changed-files@24d32ffd492484c1d75e0c0b894501ddb9d30d62
        with:
          files_yaml: |
            src:
              - Dockerfile*
              - Cargo.lock
              - Cargo.toml
              - deny.toml
              - rust-toolchain.toml
              - iris-*/**
              - migrations/**
              - scripts/**
              - .github/workflows/build-all-targets.yml
              - .github/workflows/ci-full.yml

      - name: Install Dependencies
        if: steps.changed-files-yaml.outputs.src_any_changed == 'true'
        run: sudo apt install protobuf-compiler
      
      - name: Cache Rust build
        if: steps.changed-files-yaml.outputs.src_any_changed == 'true'
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830
        id: cache-rust
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: rust-build-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            rust-build-${{ runner.os }}-

      - name: Install Rust
        if: steps.changed-files-yaml.outputs.src_any_changed == 'true'
        run: rustup toolchain install 1.85.0

      - name: Set Rust as default
        if: steps.changed-files-yaml.outputs.src_any_changed == 'true'
        run: rustup default 1.85.0
      
      - name: Install Rust clippy for checking clippy errors
        if: steps.changed-files-yaml.outputs.src_any_changed == 'true'
        run: rustup component add clippy

      - name: Install Rustfmt for formatting
        if: steps.changed-files-yaml.outputs.src_any_changed == 'true'
        run: rustup component add rustfmt
      
      - name: Run cargo fmt
        if: steps.changed-files-yaml.outputs.src_any_changed == 'true'
        run: cargo fmt -- --check

      - name: Run cargo clippy
        if: steps.changed-files-yaml.outputs.src_any_changed == 'true'
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings --no-deps
      
      - name: Build Docs
        if: steps.changed-files-yaml.outputs.src_any_changed == 'true'
        run: RUSTDOCFLAGS='-D warnings' cargo doc --workspace --no-deps --document-private-items

      - name: Build All Targets (including tests)
        if: steps.changed-files-yaml.outputs.src_any_changed == 'true'
        run: cargo build --release --all-features --lib --bins --benches --examples --tests

      - name: Upload build artifacts
        if: steps.changed-files-yaml.outputs.src_any_changed == 'true'
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808
        with:
          name: ${{ github.sha }}-artifacts
          path: |
            target/release/*
            target/release/deps/*
            target/release/build/*
            target/release/.fingerprint/*
            target/release/examples/*
            !target/release/*.d
          retention-days: 1

  # Test jobs - these depend on the build artifacts
  unit-tests:
    timeout-minutes: 20
    runs-on:
      labels: ubuntu-22.04-16core
    permissions:
      contents: read
    needs: [build-all]
    if: needs.build-all.outputs.src_any_changed == 'true'

    services:
      postgres:
        image: postgres
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      
      - name: Get all test, doc and src files that have changed
        id: changed-files-yaml
        uses: tj-actions/changed-files@24d32ffd492484c1d75e0c0b894501ddb9d30d62
        with:
          files_yaml: |
            src:
              - Dockerfile*
              - Cargo.lock
              - Cargo.toml
              - deny.toml
              - rust-toolchain.toml
              - iris-*/**
              - migrations/**
              - scripts/**
              - .github/workflows/run-unit-tests.yaml

      - name: Install Dependencies
        run: sudo apt install protobuf-compiler

      - name: Cache Rust build
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830
        id: cache-rust
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: rust-build-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            rust-build-${{ runner.os }}-

      - name: Install Rust
        run: rustup toolchain install 1.85.0

      - name: Set Rust as default
        run: rustup default 1.85.0

      - name: Download build artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16
        with:
          name: ${{ github.sha }}-artifacts
          path: target/release/

      - name: Set permissions on downloaded artifacts
        run: chmod +x target/release/* || true
      
      - name: Run Tests
        if: steps.changed-files-yaml.outputs.src_any_changed == 'true'
        run: cargo test --release -- --test-threads=1

      - name: Run Tests with DB
        if: steps.changed-files-yaml.outputs.src_any_changed == 'true'
        run: cargo test --release --features db_dependent -- --test-threads=1
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres

      - name: Run CPU E2E tests
        if: steps.changed-files-yaml.outputs.src_any_changed == 'true'
        run: cargo test --release -p iris-mpc-cpu -- e2e --test-threads=1 --include-ignored
        env:
          RUST_LOG: info
          RUST_BACKTRACE: 1
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres

  cpu-integration-tests:
    timeout-minutes: 20
    runs-on:
      labels: ubuntu-22.04-16core
    permissions:
      contents: read
      id-token: write
    needs: [build-all]
    if: needs.build-all.outputs.src_any_changed == 'true'
    
    env:
      REGISTRY: ghcr.io

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

      - name: Get all test, doc and src files that have changed
        id: changed-files-yaml
        uses: tj-actions/changed-files@24d32ffd492484c1d75e0c0b894501ddb9d30d62
        with:
          files_yaml: |
            src:
              - Dockerfile*
              - Cargo.lock
              - Cargo.toml
              - deny.toml
              - rust-toolchain.toml
              - iris-*/**
              - migrations/**
              - scripts/**
              - .github/workflows/run-unit-tests.yaml

      - name: Cache Rust build
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830
        id: cache-rust
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: rust-build-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            rust-build-${{ runner.os }}-

      - name: Download build artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16
        with:
          name: ${{ github.sha }}-artifacts
          path: target/release/

      - name: Set permissions on downloaded artifacts
        run: chmod +x target/release/* || true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@49f33fe638c0cba4fb16037a27915a7ab7740259
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076
        with:
          registry-type: public

      - name: Log in to the Container registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and export to Docker
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83
        with:
          context: .
          file: Dockerfile.dev.hawk
          platforms: linux/amd64
          load: true
          tags: hawk-server-local-build:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run docker compose
        uses: hoverkraft-tech/compose-action@40041ff1b97dbf152cd2361138c2b03fa29139df
        continue-on-error: false
        env:
          COMPOSE_PROGRESS: plain          # no fancy TTY bars
          COMPOSE_HTTP_TIMEOUT: 600        # bump timeout
        with:
          compose-file: "./docker-compose.test.yaml"

      - name: Execute tests in the running services
        run: |
          docker compose -f docker-compose.test.yaml exec iris_mpc_client "./run-client-docker.sh"

  cpu-genesis-e2e-tests:
    timeout-minutes: 20
    runs-on:
      labels: ubuntu-22.04-16core
    permissions:
      contents: read
      id-token: write
    needs: [build-all]
    if: needs.build-all.outputs.src_any_changed == 'true'
    
    env:
      REGISTRY: ghcr.io

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

      - name: Get all test, doc and src files that have changed
        id: changed-files-yaml
        uses: tj-actions/changed-files@24d32ffd492484c1d75e0c0b894501ddb9d30d62
        with:
          files_yaml: |
            src:
              - Dockerfile*
              - Cargo.lock
              - Cargo.toml
              - deny.toml
              - rust-toolchain.toml
              - iris-*/**
              - migrations/**
              - scripts/**
              - .github/workflows/cpu-genesis-e2e-tests.yaml

      - name: Cache Rust build
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830
        id: cache-rust
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: rust-build-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            rust-build-${{ runner.os }}-

      - name: Download build artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16
        with:
          name: ${{ github.sha }}-artifacts
          path: target/release/

      - name: Set permissions on downloaded artifacts
        run: chmod +x target/release/* || true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435

      - name: Log in to the Container registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@49f33fe638c0cba4fb16037a27915a7ab7740259
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076
        with:
          registry-type: public

      - name: Build and export to Docker
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83
        with:
          context: .
          file: Dockerfile.hnsw.test.e2e
          platforms: linux/amd64
          load: true
          tags: hnsw-tests-e2e-local:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Show disk space before compose
        run: df -h && docker system df -v

      - name: Run docker compose
        id: compose_up
        continue-on-error: false
        env:
          COMPOSE_PROGRESS: plain          # no fancy TTY bars
          COMPOSE_HTTP_TIMEOUT: 600        # bump timeout
        uses: hoverkraft-tech/compose-action@40041ff1b97dbf152cd2361138c2b03fa29139df
        with:
          compose-file: "./docker-compose.test.hnsw.e2e.yaml"

      - name: Execute end-to-end tests in running services
        run: |
          docker compose -f "docker-compose.test.hnsw.e2e.yaml" exec "hnsw_tests_e2e" "/src/iris-mpc/scripts/run-tests-hnsw-e2e.sh"