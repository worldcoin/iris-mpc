name: Enforce prod deploy approvals

on:
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]

jobs:
  check-approvals:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    steps:
      - name: Check approvals for deploy/prod changes
        uses: actions/github-script@f28e40c7f34bde8b3046d885e986cb6290c5673b # v7.1.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pull_number = context.payload.pull_request.number;
            const { owner, repo } = context.repo;
            core.info(`Checking PR #${pull_number} in ${owner}/${repo}`);

            const files = await github.paginate(github.rest.pulls.listFiles, {
              owner,
              repo,
              pull_number,
            });
            core.info(`Found ${files.length} changed files`);
            core.info(`Changed files: ${files.map(f => f.filename).join(', ')}`);

            const touchesProdDeploy = files.some((file) =>
              file.filename === 'deploy/prod' || file.filename.startsWith('deploy/prod/')
            );
            core.info(`Touches deploy/prod: ${touchesProdDeploy}`);

            if (!touchesProdDeploy) {
              core.info('No changes in deploy/prod detected. Skipping approval requirements.');
              return;
            }
            core.info('Changes in deploy/prod detected. Checking approval requirements.');

            const reviews = await github.paginate(github.rest.pulls.listReviews, {
              owner,
              repo,
              pull_number,
            });
            core.info(`Found ${reviews.length} total reviews`);

            const latestReviewStateByUser = new Map();
            for (const review of reviews) {
              if (!review.user || !review.user.login) {
                core.info(`Skipping review without user info: ${JSON.stringify(review)}`);
                continue;
              }
              core.info(`Review from ${review.user.login}: ${review.state}`);
              latestReviewStateByUser.set(review.user.login, review.state);
            }
            core.info(`Latest review states: ${JSON.stringify(Object.fromEntries(latestReviewStateByUser))}`);

            const approvedLogins = Array.from(latestReviewStateByUser.entries())
              .filter(([, state]) => state === 'APPROVED')
              .map(([login]) => login);
            core.info(`Approved logins: [${approvedLogins.join(', ')}] (${approvedLogins.length} total)`);

            if (approvedLogins.length < 2) {
              core.setFailed(`Changes to deploy/prod require at least two approvals. Found: ${approvedLogins.length}`);
              return;
            }
            core.info('âœ“ Minimum approval count requirement met (2+ approvals)');

            // Define approval groups - each group must have at least one approval
            const approvalGroups = new Map([
              ['Group A', ['philsippl', 'wojciechsromek', 'leonanos8']],
              ['Group B', ['eaypek-tfh', 'carlomazzaferro']]
            ]);

            // Log group configurations
            for (const [groupName, members] of approvalGroups) {
              core.info(`${groupName} members: [${members.join(', ')}]`);
            }

            // Check approvals for each group
            const groupApprovalStatus = new Map();
            const groupApprovers = new Map();
            
            for (const [groupName, members] of approvalGroups) {
              const approvers = approvedLogins.filter((login) => members.includes(login));
              const hasApproval = approvers.length > 0;
              
              groupApprovers.set(groupName, approvers);
              groupApprovalStatus.set(groupName, hasApproval);
              
              core.info(`${groupName} approvers: [${approvers.join(', ')}] - Has approval: ${hasApproval}`);
            }

            // Check if all groups have at least one approval
            const missingGroups = Array.from(groupApprovalStatus.entries())
              .filter(([, hasApproval]) => !hasApproval)
              .map(([groupName]) => groupName);

            if (missingGroups.length > 0) {
              core.setFailed(`Changes to deploy/prod require approvals from ALL designated groups. Missing: ${missingGroups.join(', ')}`);
              return;
            }

            core.info(`âœ“ Required approvals detected from all ${approvalGroups.size} groups.`);
            core.info('ðŸŽ‰ All approval requirements satisfied!');
