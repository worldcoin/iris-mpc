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
0.4986098239110287
0.4841909485430874


/// Code to generate the above
import numpy as np
from iris.io.dataclasses import IrisTemplate
from iris.nodes.matcher.hamming_distance_matcher import HammingDistanceMatcher
from iris.utils.base64_encoding import base64_encode_array

def random_template():
  mock_iris_code = np.random.randint(0, 2, (16, 200, 2, 2)).astype(bool)
  mock_mask_code = np.random.randint(0, 2, (16, 200, 2, 2)).astype(bool)
  return IrisTemplate(iris_codes=[mock_iris_code], mask_codes=[mock_mask_code], iris_code_version="v2.1")

def encode_template(template):
  s = base64_encode_array(template.iris_codes[0]).decode('utf-8')
  s += "\n"
  s += base64_encode_array(template.mask_codes[0]).decode('utf-8')
  return s

t1 = random_template()
t2 = random_template()

print(encode_template(t1) + "\n" + encode_template(t2))
# No rotations
matcher = HammingDistanceMatcher(0, None, None)
print(matcher.run(t1, t2))
# 15 rotations both directions
matcher = HammingDistanceMatcher(15, None, None)
print(matcher.run(t1, t2))